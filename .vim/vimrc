syntax enable
colorscheme spacegray
filetype plugin indent on
set encoding=utf-8
set clipboard=unnamed,unnamedplus
set backspace=indent,eol,start
set hidden

" I lead with space
map <Space> <Nop>
let mapleader=" "

" tab using 2 spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
let g:latex_to_unicode_tab=0

" I edit this file a lot
nnoremap <leader>e :e $MYVIMRC<cr>
nnoremap <leader><S-r> :source $MYVIMRC<cr>

" let me resize windows
set ttymouse=sgr " workaround vim bug if not using xterm
set mouse=a

" fuzzy find
set wildignore+=*/tmp/*,*.swp,*.zip,*.exe,*/.git/*,*/node_modules/*,*/dist/*,*/react-styles/css/*,*/lcov-report/*
set path+=**
set wildmenu
nnoremap <C-p> :find 
nnoremap <leader>f :Files<CR>

" grep
set grepprg=rg\ --vimgrep\ --smart-case
function Grep(...)
  let s = 'grep'
  for i in a:000
    let s = s . ' ' . i
  endfor
  exe s
endfunction
command -nargs=? G call Grep(<f-args>)
nnoremap <C-f> :%s/
" coc grep is better
nnoremap <C-S-f> :CocSearch 

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <Esc>[1;5D <c-w>h
map <Esc>[1;5B <c-w>j
map <Esc>[1;5A <c-w>k
map <Esc>[1;5C <c-w>l

" directory view
let g:netrw_banner = 0 " takes half screen otherwise
let g:netrw_liststyle = 3 " pretty tree
let g:netrw_preview = 1 " vert split for preview
let g:netrw_browse_split = 4 " open in previous split
let g:netrw_altv = 1
let g:netrw_winsize = 25
noremap <silent> <leader>a :Lexplore<CR>
set splitright

function IsLoneNetRW()
  return getbufvar(winbufnr(winnr()), "&filetype") == "netrw" && winnr('$') == 1
endfunction

aug netrw_open
  au!
  " If we're a netrc window and there's one buffer left add a new split
  au BufCreate * if IsLoneNetRW()|bd|:Lexplore|endif
aug END
aug netrw_close
  au!
  " If we're a netrc window and there's one buffer left quit
  au WinEnter * if IsLoneNetRW()|q|endif
aug END

" make errors
nnoremap <leader>n :cnext<CR>
nnoremap <leader>N :cprev<CR>
nnoremap <leader>q :cope<CR>

" rust make
let g:rust_recommended_style=0 " cramps my style
aug rust
  au!
  au FileType rust set makeprg=cargo\ check
  au FileType rust set errorformat=
              \%-G,
              \%-Gerror:\ aborting\ %.%#,
              \%-Gerror:\ Could\ not\ compile\ %.%#,
              \%Eerror:\ %m,
              \%Eerror[E%n]:\ %m,
              \%Wwarning:\ %m,
              \%Inote:\ %m,
              \%C\ %#-->\ %f:%l:%c,
              \%E\ \ left:%m,%C\ right:%m\ %f:%l:%c,%Z
aug END

" julia make
aug julia
  au!
  au FileType julia set makeprg=julia\ --project=.\ test/runtests.jl
  "au FileType julia set errorformat=
aug END


" coc langauge server
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
set number
set signcolumn=number
set updatetime=300
" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" GoTo code navigation.
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <leader>s :CocCommand clangd.switchSourceHeader<cr>
nmap <silent> <leader>y <Plug>(coc-type-definition)
nmap <silent> <leader>i <Plug>(coc-implementation)
nmap <silent> <leader>r <Plug>(coc-references)
" Use for tags
set tagfunc=CocTagFunc

" Quickfix
nmap <leader>qf  <Plug>(coc-fix-current)

" Return to cursor on open
aug position
"  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
aug END

" Make directories to filepath when saving
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" Allow holding down shift for basic commands
command W w
command Q q
command Wq wq
command WQ wq
command E e

" Write new/existing ctags on save
" DOESN'T delete old ones... will have to do that manually
autocmd BufWritePost *
      \ if filereadable('tags') |
      \   call system('ctags -a '.expand('%')) |
      \ endif

" ; = :
nnoremap ; :

set laststatus=2
